import React, {useState} from 'react';
import {Share, ScrollView, Platform, Alert} from 'react-native';
import VersionInfo from 'react-native-version-info';
import PageHeading from '../../components/PageHeading';
import {normal} from '../../Assets/lottie';
import SafeView from '../../components/SafeView';
import BarButton from '../../components/BarButton';
import InAppBrowser from '../../services/InAppBrowser';
import * as Images from '../../Assets/Images';
import {useDispatch} from 'react-redux';
import {playMusic} from '../../store/actions/music-action';
import {getValue, storeValue} from '../../services/storage';
import AnimatedBackground from '../../components/AnimatedBackground';
import API from '../../services/API';
import {store} from '../../store/store';
import {logOutUser} from '../../store/actions/auth-action';
import {toggleControls} from '../../store/actions/control-action';
import TrackPlayer from 'react-native-track-player';
import branch from 'react-native-branch';
import {musicSwitch} from '../../utils/helper';
import AsyncStorage from '@react-native-async-storage/async-storage';

const playStoreUrl =
  'https://play.google.com/store/apps/details?id=com.hyptalk.believe';
const appStoreUrl =
  'https://apps.apple.com/us/app/believe-hypnosis/id6466321566';

/**
 * The function `createBranchLink` generates a short URL for sharing the "Believe Hypnosis" app on
 * different platforms.
 * @returns The function `createBranchLink` returns a URL generated by the
 * `branchUniversalObject.generateShortUrl` method.
 **/
const createBranchLink = async () => {
  // try {
  const branchUniversalObject = await branch.createBranchUniversalObject(
    'Believe Hypnosis',
    {title: 'Believe Hypnosis'},
  );

  const linkProperties = {
    feature: 'share',
    channel: 'content_share',
  };

  const controlParams = {
    $desktop_url: 'https://believehypnosis.app/',
    $ios_url: 'https://apps.apple.com/us/app/believe-hypnosis/id6466321566',
    $android_url:
      'https://play.google.com/store/apps/details?id=com.hyptalk.believe',
  };

  let {url} = await branchUniversalObject.generateShortUrl(
    linkProperties,
    controlParams,
  );
  return url;
};

const backgroundImage = {
  width: '100%',
  height: '100%',
  overflow: 'hidden',
  resizeMode: 'contain',
};
/**
 * The Settings component is a JavaScript function that renders a settings page with various options
 * such as deleting the account, changing the password, sharing the app, connecting to external links,
 * toggling background music, and displaying the app version.
 * @returns The code is returning a React component that renders a settings page. The settings page
 * includes various buttons and options such as deleting the account, changing the password, sharing
 * the app, connecting to external links, toggling background music, and displaying the app version.
 **/
const Settings = ({navigation}) => {
  const {hit_Control, Auth} = store.getState();
  const [control, setControl] = useState(
    getValue('hitControlFirst') == undefined ||
      getValue('hitControlFirst') == null
      ? false
      : getValue('hitControlFirst') == 'true',
  );
  const [active, setActive] = useState(
    getValue('background') == undefined
      ? true
      : getValue('background') == 'true',
  );
  const dispatch = useDispatch();

  /**
   * The function toggles the active state and performs different actions based on the current platform
   * and active state.
   **/
  const toggle = async () => {
    if (active) {
      storeValue('background', `${!active}`);
      await TrackPlayer.updateOptions({stopWithApp: true});
      await AsyncStorage.setItem('background', JSON.stringify(!active));
      if (Platform.OS == 'android') musicSwitch(!active);
      // if (Platform.OS == 'android') dispatch(playMusic({appMusic: !active}));
      if (Platform.OS == 'ios') {
        musicSwitch(!active);
        // dispatch(playMusic({appMusic: !active}));
        // await TrackPlayer.destroy();
      }
      setActive(!active);
    } else if (!active) {
      await AsyncStorage.setItem('background', JSON.stringify(true));
      // if (Platform.OS == 'ios') await TrackPlayer.setupPlayer();
      storeValue('background', `${true}`);
      musicSwitch(true);
      // dispatch(playMusic({appMusic: true}));
      setActive(true);
    }
  };
  /**
   * The hitToggle function toggles the control state, updates the control value, and stores the
   * updated value.
   **/
  const hitToggle = () => {
    dispatch(toggleControls(!control));
    setControl(!control);
    storeValue('hitControlFirst', !control);
  };

  /**
   * The above function is an asynchronous function that allows the user to share a message and title
   * using the Share API in JavaScript.
   **/
  const onShare = async () => {
    try {
      let branchURL = await createBranchLink();
      const result = await Share.share({
        message: branchURL,
        // message: Platform.select({android: playStoreUrl, ios: appStoreUrl}),
        title: 'Believe Hypnosis',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      alert(error.message);
    }
  };
  /**
   * The function `confirmDeleteAccount` displays an alert asking the user to confirm if they want to
   * delete their account, and if confirmed, it calls the `deleteAccount` function.
   **/
  const confirmDeleteAccount = () => {
    Alert.alert(
      'Delete Alert',
      'Are you sure that you want to delete your account',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {text: 'OK', onPress: () => deleteAccount()},
      ],
    );
  };

  console.log('AuthAuthAuthAuthAuthAuth', Auth);
  /**
   * The function `deleteAccount` is an asynchronous function that sends a DELETE request to the
   * `/delete-account` endpoint using an API object, and if the request is successful, it dispatches a
   * `logOutUser` action.
   **/
  const deleteAccount = async () => {
    try {
      const {ok, data} = await API.delete('/delete-account');
      console.log('kodnjklvnsdvndksnv', data);
      if (ok) dispatch(logOutUser());
    } catch (error) {
      console.log('ghcgctycghcvghcvgv', error);
    }
  };
  return (
    <AnimatedBackground animation={normal}>
      <SafeView>
        <PageHeading {...{title: 'Settings', navigation, backButton: true}} />

        <ScrollView
          contentContainerStyle={{paddingVertical: 10, paddingHorizontal: 20}}>
          <BarButton
            {...{
              title: 'Delete Account',
              icon: Images.deleteaccount,
              onPress: () => confirmDeleteAccount(),
            }}
          />
          {Auth.user.isPassword == 1 && (
            <BarButton
              {...{
                title: 'Change Password',
                icon: Images.changepass,
                onPress: () => navigation.navigate('ChangePassword'),
              }}
            />
          )}
          <BarButton
            {...{
              title: 'Share',
              icon: Images.shareapp,
              onPress: onShare,
            }}
          />
          <BarButton
            {...{
              title: 'Connect',
              icon: Images.connect,
              // onPress: () =>
              // Linking.openURL('https://linktr.ee/loahypnotist'),
              onPress: () =>
                InAppBrowser.open('https://linktr.ee/believehypnosis'),
            }}
          />
          <BarButton
            {...{
              title: 'Background Music',
              icon: Images.appmusic,
              onPress: toggle,
              sound: true,
              active,
            }}
          />
          {/* <BarButton
            {...{
              title: 'Control Preferences',
              icon: Images.controlIcon,
              onPress: hitToggle,
              sound: true,
              active: control,
            }}
        /> */}
          <BarButton
            {...{
              title: 'App Version',
              icon: Images.appversion,
              version:
                VersionInfo.appVersion +
                ' ' +
                `${Platform.OS == 'android' ? '(29)' : '(14)'}`,
            }}
          />
        </ScrollView>
      </SafeView>
    </AnimatedBackground>
  );
};

export default Settings;
